

Major Assertion - 30% - 100% - 200% - 500% Zoom Ins/Outs
UI/UX should stay in position ; Only 'empty space' should increase / decrease in size


Design Principles

- In this order - CSS, Sass, Less, Bootstrap, Tailwind, Semantic, Material, Svelte, Argon, Black, Paper
- consistency / combinations between design systems (css, sass, less, tailwind, bootstrap, semantic, material, svelte, argon, black, paper, ... )
- consistency / combinations between design styles (flexbox, cssgrid, absolute-positioning, fixed-blocks, elem-props (margins/paddings), ... )
- consistency / combinations between size-values (auto / % / px / em / rem / inherit / full / screen / ... )

- css selector precedence (vars > html/body > main-elems (div,main,section,..) > sub-elems (h*,p,button,input,..,t*,..) > classes/IDs + pseudo's > media-queries (order again) > keyframes > ... )
- gaps vs margins / paddings
- making changes to elems to achieve the same professional goals with other elems
- making conscious mistakes to achieve the same professional goals
eg. before div with small height & overflowed children; after div with content starting after before's small height; all content overlapping but still in well-order
- screen thresholds (md - 480-768px, lg - 768+ px)



CSS - NB: all Shorthand & Tailwind Equivalents

cssprop: value !important; - override older css styles / in-built classes from design systems (eg. Bootstrap/Tailwind/..)
display: flex-column on body tag - does not take up entire body (requires a child-div as container) // TODO: ..
display: block; / inline; - conversions between - inline elems (a, span, button, FIND_OTHERS, ..) & block elems (div, FIND_OTHERS, ..) // TODO: NB: other attributes of block/inline/..
- some inline elems cannot receive certain styles, so converting them to 'display: block' elems allows that
float-left/right - 
@media (min-width: 768px) - screen thresholds (lg - 768+ px)
box-sizing: border-box;
font-family: Arial, Helvetica, sans-serif; 'Raleway', sans-serif; 
font-weight: bold; 900;
grid-template-rows/columns: repeat(auto-fit, minmax(250px, 1fr)); - repeat number of cols to auto-fit children (equal grids), with min-max (mobile-responsive) sizes
    30% 40% 30%; (3 cols with %s) repeat(4, auto); (4 rows with content height) 
    auto-fit / -fill / ...
    minmax(250px, 1fr); - 250 pixels in 1 fraction
gap/grid-gap: 1rem; - twind gap
grid-row/column: 2 / 3; - grid-row/col-start 2 to 3
row/col-start/span/end-X - start+end / start+span / end+span 
- start/end is which row/col starting/ending cell ; span is number of cells to go / 'span' through
display: grid; align-items: center; == display: flex; flex-direction: column; justify-content: center;
display: flex; justify-content: center; gap: 1em; == display: grid;

flex: 1 - 
flex: 0 0 calc(50% - 1remorder: ); - Specifies the components of a flexible length: the flex grow factor and flex shrink factor, and the flex basis
flex-grow/shrink/basis - 
flex: 0 0 70%; - 
flex: 0 0 calc(50% - 2rem); - 0 grow, 0 shrink calc(..) flex basis (base width) - of each child in flex-container
order: -1 - reverse order in flex-row/column
order: unset - remove previously set value (as an override)

margin: 0 auto; - 
font-family: 'Libre Baskerville', serif; - 
text-transform: uppercase; - / none/lowercase/capitalize/full-width/full-size-kana/
box-shadow: 0 5px 10px white; - (twind - shadow)
filter: drop-shadow(0 1px 1px rgb(0 0 0 / 0.05)); - (twind - drop-shadow)
filter: blur(10px);
transition: filter 0.3s ease;
content: ""; - innerHTML
list-style: none; - .. 
line-height: 2; - no measurement unit
.class:pseudo-class::pseudo-elem/state/selector - eg. .class:hover::before (no space in-between : / :: pseudo's) - ...
- TODO: find out & test others, for any egs. with prop :pseudo with space before :
a::before { // ::before pseudo-elem - 'before' elem is gen'd
    font-family: "Font Awesome 5 Brands"; // set font-family 'before' a elem is gen'd
}
a[href*='facebook']::before { // a[attr='value'][attr*='contains value']::before - before this <a> is gen'd
    content: "\f39e"; // content is font-awesome code for facebook (\f39e) - 'Font Awesome 5 Brands' font-family set in previous statement
} // NB:  a[attr='value'][attr*='contains value'] (NOT  a[attr='value' attr*='contains value'] OR  a[attr='value', attr*='contains value'])





Tailwind

*-x > *-x(px/%/em/rem) - eg- h-5 shorthand of h-[5px] (not h-[50%])
h-1/2 = h-0.5 = h-[50%]
h-1 = h-[100%] = h-full
h-10 (+) = h-[10px] (+) ? = ?
1 rem = 4 px

lg:24 - define set responsive size for large-screen (for the elem having this class)
sm/md/lg:X - define set responsive size for respective screen
container
block
float-left/right - 'absolute'ly float/start elem from left/right -most edge of parent elem
flex = -row by default
flex-1 justify-center
flex-wrap - can be used grids (find grid equivalent)
flex-grow / grow - css flex-grow - 
flex-shrink-0 / * - 
flex-grow/shrink/basis-X - 
content-center - .. (NB: differences b/n justify/items/content-center)
bg-black/white - or inherit/current/transparent - needs no alpha value eg. bg-red-500
- all other colors need alpha values from 50, 100, 200, .. , 900, 950, w//out opacity - eg. bg-red-500/50 /[.5] 
- *-50 (white/lightest) *-950 (black/darkest)
bg-cover bg-no-repeat
space-x-4 - x-gap between 2 elems
space-y-1 - y-gap between 2 elems
w-11/12
font-black
font-semibold | font-thin
focus:ring-2 focus:ring-offset-2 focus:ring-gray-800
focus:ring-2 focus:ring-inset focus:ring-white
active:[prop]
text-base leading-4
text-lgr
text-base
gap-x-8 / *
border-(t/b/l/r)
f-f-p
inline-flex
hidden
sm:class (sm/md/lg/..) - responsiveness
justify-between - can be for 3+ elems - 'max-space' in-between
capitalize - CamelCase
uppercase / lowercase
underline
inline
min-h-screen / (w-)*
max-w-none / (h-)*
divide-y
leading-7
tracking-tight
bg-clip-text
text-transparent
font-semibold
bg-gradient-to-(t/b/l/r) from-[color-XXX] to-[color-XXX] - eg. cyan-500
leading-normal
text-[color-XXX] - can be used to modify colors of svg elements (not (background) images)
form-control
bg-clip-padding
inline-block
leading-tight
inset-0 / *
transition-all / *
object-cover object-center
divide-x / y
font-extrabold
font-light
h/w-fit
(drop-)shadow-lg shadow-white - define shadow, before color
bg-gray-700/50 == bg-gray-700 opacity-50
font-bold - not text-bold (font-weight; not text-weight)
font - family/size/smoothing/style/weight/variant-numeric
text - align/color/decoration/d-color/d-style/d-thickness/underline-offset/transform/overflow/wrap/indent
outline-none - 
dark:bg-gray-700 - darkMode: 'class' (tailwindconfig.css) - custom twind-css class-construct
sticky - fix elem to screen on-scroll
text-center / left/right/top/bottom - center/position innerText
antialiased



Bootstrap

container
row/col - NB: default (& custom) sizes, based on bstrap grid system
row/col-sm/md/lg-[1:12] - 
d-flex - use bstrap flexbox
justify-content-center
align-items-center
text-center - align item center of container (works for all kinds of 'block' elements; if 'inline', convert to 'display: block' element 1st)
form-control
btn btn-primary - button class; blue button
btn-block - button takes width-size of parent <form>


text-center - center innerText (NB: check 'or child elems')
- NB: difference between bstrap & twind text-center
table table-bordered table-dark
thead-dark




